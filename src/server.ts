/**
 * Generated by veryExpress@0.5.21 
 * https://github.com/Justin26l/VeryExpress
 */

import express from 'express';
import dotenv from 'dotenv';
import crypto from 'crypto';
import helmet from 'helmet';

import log from './system/_utils/logger.gen';
import processTimer from './system/_utils/processTimer.gen';
import VexDbConnector from './system/_services/VexDbConnector.gen';

import ApiRouter from './system/_routes/ApiRouter.gen';
import SwaggerRouter from './system/_routes/SwaggerRouter.gen';
import cookieParser from 'cookie-parser';
import AuthRouter from './system/_routes/AuthRouter.gen';

/** 
 * Configure
 */
dotenv.config();

const helmetConfig = {
    xPoweredBy: false,
    xDnsPrefetchControl: { allow: false },
};

const vexDB = new VexDbConnector({
    mongoUrl: process.env.MONGODB_URI,
    recordAccessLog: false,
});

const ApiRoute = new ApiRouter();
const SwaggerRoute = new SwaggerRouter();
const AuthRoute = new AuthRouter();

/** 
 * App
 */
async function main(): Promise<void> {

    const app = express();
    app.disable("x-powered-by");

    // UseMiddleware
    app.use(express.json());
    app.use(express.static('public'));
    app.use(helmet(helmetConfig));
    app.use(processTimer);
    app.use(vexDB.middleware);

    // UsePlugins
    app.use(cookieParser());

    // Routes
    app.use("/api", ApiRoute.getRouter());
    app.use("/swagger", SwaggerRoute.getRouter());
    app.use("/auth", AuthRoute.getRouter());

    
    app.get('/', (req, res) => {
        res.send(`
            <div>
                <h1>Hello World</h1>
                <ul>
                    <li><a href="/login">Login</a></li>
                    <li><a href="/mytokens">myTokens</a></li>
                    <li><a href="/refreshtoken">RefreshToken</a></li>
                    <li><a href="/logout">LogOut</a></li>
                    <li><a href="/swagger">Swagger UI</a></li>
                </ul>
                
                <h1>Others</h1>
                <ul>
                    <li><a href="/logincallback">logincallback</a></li>
                </ul>
            </div>
        `);
    });

    /**
     * Dummy Login Page,
     * this should handle by client application (vue, react, angular, etc)
     * - list all available provider
     */
    app.get('/login', (req, res) => {
        
        const nonce = crypto.randomBytes(16).toString("base64");
        res.setHeader("Content-Security-Policy", `script-src 'self' 'nonce-${nonce}'`);
        res.send(`
            <script nonce="${nonce}" src="${process.env.APP_HOST}:${process.env.APP_PORT}/js/login.js"></script>
            <body>
                <p>Email:</p>
                <input type="email" id="email"/>
                <p>Password:</p>
                <input type="password" id="password"/>
                <br/>
                <br/>
                <button id="localLoginBtn">Login</button>
                <button id="localRegisterBtn">Register</button>
                <br/>
                <br/>
                <p> login with sso : </p>
                <p> No OAuth provider configured. </p>

        </body>`);
        
    });

    /**
     * Dummy Token Display Page
     **/
    app.get('/mytokens', (req, res) => {
        const nonce = crypto.randomBytes(16).toString("base64");
        res.setHeader("Content-Security-Policy", `script-src 'self' 'nonce-${nonce}'`);
        res.send(`
            <script nonce="${nonce}" src="${process.env.APP_HOST}:${process.env.APP_PORT}/js/mytokens.js"></script>
            <link rel="stylesheet" href="${process.env.APP_HOST}:${process.env.APP_PORT}/css/style.css">
            <body>
                <h1>My Token</h1>
                <pre id="tokenData">{a:1,B:2}<code></pre>
                <a href="/">back to home</a>
            </body>
        `);
    });

    /** 
     * Dummy Token Exchange trigger
     **/
    app.get('/refreshtoken', (req, res) => {
        const nonce = crypto.randomBytes(16).toString("base64");
        res.setHeader("Content-Security-Policy", `script-src 'self' 'nonce-${nonce}'`);
        res.send(`
            <script nonce="${nonce}" src="${process.env.APP_HOST}:${process.env.APP_PORT}/js/refreshtokens.js"></script>
            <link rel="stylesheet" href="${process.env.APP_HOST}:${process.env.APP_PORT}/css/style.css">
            <body>
                <h1>New Token</h1>
                <pre id="tokenData">{a:1,B:2}<code></pre>
                <a href="/">back to home</a>
            </body>
        `);
    });

    /** 
     * Dummy Code Exchange Trigger
     **/
    app.get('/logincallback', (req, res) => {
        const nonce = crypto.randomBytes(16).toString("base64");

        res.setHeader("Content-Security-Policy", `script-src 'self' 'nonce-${nonce}'`);
        res.send(`
            <script nonce="${nonce}" src="${process.env.APP_HOST}:${process.env.APP_PORT}/js/logincallback.js"></script>
            <link rel="stylesheet" href="${process.env.APP_HOST}:${process.env.APP_PORT}/css/style.css">
            <body>
                <h1>Profile Data</h1>
                <pre id="tokenData"></pre>
                <a href="/">back to home</a>
            </body>
        `);
    });

    /** 
     * Dummy Logout Page, 
     * - this should handle by client application
     * - client side application should remove local storage's tokens
     **/
    app.get('/logout', (req, res) => {
        const nonce = crypto.randomBytes(16).toString("base64");
        res.setHeader("Content-Security-Policy", `script-src 'self' 'nonce-${nonce}'`);
        res.send(`
            <script nonce="${nonce}">
                localStorage.removeItem('accessToken', jsonData.result.accessToken);
                localStorage.removeItem('accessTokenIndex', jsonData.result.accessTokenIndex);
                localStorage.removeItem('refreshToken', jsonData.result.refreshToken);
                localStorage.removeItem('refreshTokenIndex', jsonData.result.refreshTokenIndex);
            </script>
        `);
    });
    

    app.listen(process.env.APP_PORT, () => {
        if (!process.env.MONGODB_URI) throw new Error('MONGODB_URI is not defined');
        vexDB.connectMongo();
        log.ok(`Server is running on : ${process.env.APP_HOST}:${process.env.APP_PORT}`);
    });

}

main();
