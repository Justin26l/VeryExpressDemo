/**
 * Generated by veryExpress@0.5.11 
 * https://github.com/Justin26l/VeryExpress
 */

import { Request, Response, NextFunction } from "express";
import * as roles from "../_roles";
import responseGen from "../_utils/response.gen";
import log from "../_utils/logger.gen";

export { roles };

export default class RoleBaseAccessControl {
    private collection: string;
    private actions: {[key:string]: string} = {
        GET: 'read',
        POST: 'create',
        PUT: 'update',
        PATCH: 'update',
        DELETE: 'delete',
    };

    constructor(
        collection: string, 
    ) {
        this.collection = collection;
    }

    public middleware = (req: Request, res: Response, next: NextFunction) => {
        try { 
            log.info("RBAC.middleware", req.method, req.path, req.user);
            if ( !req.user ) {
                throw 401;
            }

            const user :any = req.user;
            
            if ( user.roles.includes('user') && new roles.user().checkAccess(this.collection, this.actions[req.method]) ) {
                next();
            }else{
                throw 403;
            }
        }
        catch (e: any) {
            log.errorNoExit(e);
            if (typeof e === 'number') {
                responseGen.send(res, e);
            }
            else {
                responseGen.send(res, 500, { message: e.errorMessages });
            }
        }
    }
}