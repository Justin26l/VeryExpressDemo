/**
 * Generated by veryExpress@0.5.18 
 * https://github.com/Justin26l/VeryExpress
 */

import * as controllerFactory from "./_ControllerFactory.gen";
import { Router, Request, Response } from 'express';

import { checkSchema, validationResult } from 'express-validator';
import utils from "./../../system/_utils";
import VexResponseError from "../_types/VexResponseError.gen";

import { UserModel } from '../_models/UserModel.gen';

class UserController extends controllerFactory._ControllerFactory {
    public router: Router;

    constructor() {
        super();
        this.router = Router();
        this.routes();
    }

    public routes() {
        
        
        this.router.post('/search', 
            this.getListUser.bind(this)
        );

        
        this.router.get('/:id', 
            checkSchema(            {
              id: {
                in: 'params',
                optional: false,
                notEmpty: true,
                isString: true,
                custom: { options: this.isObjectId }
              }
            }),
            this.getUser.bind(this)
        );

        
        this.router.post('/', 
            checkSchema(            {
              authProfiles: {
                in: 'body',
                optional: { options: { values: 'falsy', checkFalsy: true } },
                notEmpty: true,
                isArray: true
              },
              email: {
                in: 'body',
                optional: { options: { values: 'falsy', checkFalsy: true } },
                notEmpty: true,
                isString: true
              },
              name: { in: 'body', optional: false, notEmpty: true, isString: true },
              active: { in: 'body', optional: false, notEmpty: true, isBoolean: true },
              locale: {
                in: 'body',
                optional: { options: { values: 'falsy', checkFalsy: true } },
                notEmpty: true,
                isString: true
              },
              roles: {
                in: 'body',
                optional: { options: { values: 'falsy', checkFalsy: true } },
                notEmpty: true,
                isArray: true
              },
              profileErrors: {
                in: 'body',
                optional: { options: { values: 'falsy', checkFalsy: true } },
                notEmpty: true,
                isArray: true
              }
            }),
            this.createUser.bind(this)
        );

        
        // putRoute disabled

        
        this.router.patch('/:id', 
            checkSchema(            {
              id: {
                in: 'params',
                optional: false,
                notEmpty: true,
                isString: true,
                custom: { options: this.isObjectId }
              },
              authProfiles: {
                in: 'body',
                optional: { options: { values: 'falsy', checkFalsy: true } },
                notEmpty: true,
                isArray: true
              },
              email: {
                in: 'body',
                optional: { options: { values: 'falsy', checkFalsy: true } },
                notEmpty: true,
                isString: true
              },
              name: {
                in: 'body',
                optional: { options: { values: 'falsy', checkFalsy: true } },
                notEmpty: true,
                isString: true
              },
              active: {
                in: 'body',
                optional: { options: { values: 'falsy', checkFalsy: true } },
                notEmpty: true,
                isBoolean: true
              },
              locale: {
                in: 'body',
                optional: { options: { values: 'falsy', checkFalsy: true } },
                notEmpty: true,
                isString: true
              },
              roles: {
                in: 'body',
                optional: { options: { values: 'falsy', checkFalsy: true } },
                notEmpty: true,
                isArray: true
              },
              profileErrors: {
                in: 'body',
                optional: { options: { values: 'falsy', checkFalsy: true } },
                notEmpty: true,
                isArray: true
              }
            }),
            this.updateUser.bind(this)
        );

        
        // deleteRoute disabled

    };

    public async getUser(req: Request, res: Response): Promise<Response> {
        try {
            const validationError = validationResult(req);
            if ( ! validationError.isEmpty() ) {
                return utils.response.send(res, 400, {
                    code: utils.response.code.err_validation, 
                    result: validationError.array()
                });
            };

            const result = await UserModel.findById(req.params.id);

            if (!result) {
                return utils.response.send(res, 404);
            }
            else {
                return utils.response.send(res, 200, { result });
            };
        } catch (err:any) {
            return utils.response.send(res, 500, { message: err.message });
        }
    }

    public async getListUser(req: Request, res: Response): Promise<Response> {
        try {
            const searchFilter = req.body.filter;
            const selectedFields = utils.common.parseFieldsSelect(req);
            const populateOptions = utils.common.parseCollectionJoin(req, {});

            let query = UserModel.find(searchFilter, selectedFields);
            if (populateOptions && Array.isArray(populateOptions) && populateOptions.length > 0) {
                query = query.populate(populateOptions);
            }
            const result = await query;
            return utils.response.send(res, 200, { result });
        } 
        catch (err:any) {
            if(err instanceof VexResponseError) {
                throw err;
            }
            else { 
                return utils.response.send(res, 500, { result: err.message });
            }
        }
    }

    public async createUser(req: Request, res: Response): Promise<Response> {
        try {
            const validationError = validationResult(req);
            if ( ! validationError.isEmpty() ) {
                return utils.response.send(res, 400, {
                    code: utils.response.code.err_validation, 
                    result: validationError.array()
                });
            };
            if (req.body._id) {
                delete req.body._id;
            };
            
            const result = await UserModel.create(req.body);
            if (!result) {
                return utils.response.send(res, 400, {
                    code: utils.response.code.err_create
                });
            }
            else {
                return utils.response.send(res, 201, {result});
            };
        } catch (err:any) {
            return utils.response.send(res, 500, { message: err.message });
        };
    };

    public async updateUser(req: Request, res: Response): Promise<Response> {
        try {
            const validationError = validationResult(req);
            if ( ! validationError.isEmpty() ) {
                return utils.response.send(res, 400, {
                    code: utils.response.code.err_validation, 
                    result: validationError.array()
                });
            };
            if (req.body._id) {
                delete req.body._id;
            };

            const result = await UserModel.findByIdAndUpdate(req.params.id, req.body, { new: true });
            if (!result) {
                return utils.response.send(res, 404, {
                    code: utils.response.code.err_update
                });
            }
            else {
                return utils.response.send(res, 200, { result });
            };
        } catch (err:any) {
            return utils.response.send(res, 500, { message: err.message });
        }
    }

    public async replaceUser(req: Request, res: Response): Promise<Response> {
        try {
            const validationError = validationResult(req);
            if ( ! validationError.isEmpty() ) {
                return utils.response.send(res, 400, {
                    code: utils.response.code.err_validation, 
                    result: validationError.array()
                });
            };
            if (req.body._id) {
                delete req.body._id;
            };

            const result = await UserModel.replaceOne({_id: req.params.id}, req.body);
            if (!result) {
                return utils.response.send(res, 404, { 
                    code: utils.response.code.err_update
                });
            }
            else {
                return utils.response.send(res, 200, { result });
            };
        } catch (err:any) {
            return utils.response.send(res, 500, { message: err.message });
        }
    }

    public async deleteUser(req: Request, res: Response): Promise<Response> {
        try {
            const validationError = validationResult(req);
            if ( ! validationError.isEmpty() ) {
                return utils.response.send(res, 400, {
                    code: utils.response.code.err_validation, 
                    result: validationError.array()
                });
            };

            const result = await UserModel.findByIdAndDelete(req.params.id);
            if (!result) {
                return utils.response.send(res, 404, {
                    code: utils.response.code.err_delete
                });
            }
            else {
                return utils.response.send(res, 204, { result });
            };
        } catch (err:any) {
            return utils.response.send(res, 500, { message: err.message });
        }
    }
}

export default new UserController().router;
